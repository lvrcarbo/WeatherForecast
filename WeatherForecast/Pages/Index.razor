@page "/"

@using WeatherForecast.Models
@using System.Text
@inject IJSRuntime js;
@inject HttpClient Http;

@if (forecast == null)
{
    <p><em>@message</em></p>
    <p><em>@url</em></p>
}
else
{
    <div class="card-group">
        @foreach (var item in forecast.Daily.Take(5))
        {
            <DailyForecast Seconds="@item.Dt"
                   LowTemp="@item.Temp.Min"
                   HighTemp="@item.Temp.Max"
                   Description="@item.Weather[0].Description"
                   Icon="@item.Weather[0].Icon" />
        }
    </div>
}

@code {
    string message = "Loading...";
    Position pos;
    OpenWeather forecast;
    StringBuilder url;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetPosition();
            await GetForecast();
        }
        catch (Exception)
        {
            message = "Error encountered.";
        };
    }

    private async Task GetPosition()
    {
        pos = await js.InvokeAsync<Position>(
            "bweInterop.getPosition");
    }

    private async Task GetForecast()
    {
        string APIKey = "41415df841e017f3def4ef34179462cd";

        url = new StringBuilder();

        url.Append("https://api.openweathermap.org");
        url.Append("/data/2.5/onecall?");
        url.Append("lat=");
        url.Append(pos.Latitude);
        url.Append("&lon=");
        url.Append(pos.Longitude);
        url.Append("&exclude=");
        url.Append("current,minutely,hourly,alerts");
        url.Append("&units=imperial");
        url.Append("&appid=");
        url.Append(APIKey);

        forecast = await Http
            .GetFromJsonAsync<OpenWeather>
            (url.ToString());

    }


}
